#version 450 core
#extension GL_ARB_gpu_shader_int64 : enable

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

struct node {
    int child1;
    int child2;
    int parent;
    int flag;
    vec4 COM;//4th component is mass;
    vec4 minimum;
    vec4 maximum;
};

layout(std430, binding = 0) buffer positionBuffer
{
    vec3 positions[];
};
layout(std430, binding = 1) buffer velocityBuffer
{
    vec3 velocity[];
};
layout(std430, binding = 5) buffer voxelBuffer
{
    node radix_tree[];
};
uniform uint leaf_node_offset;

/*
    stackless tree traversal:
       
    for each node visited, decide based upon the ratio of physical node size vs distance (fov or size)
    whether to refine the search and check the child nodes or move on. If a node is deemed worth
    subdividing the search, the start by going to the leftmost child. if not, then use the COM and 
    mass of the node to evaluate the forces on the current particle. Afterwards, check the parent node,
    if the parent node is -1 in the case of the root node, end the search. Otherwise, check if the node
    just visited was a left child. If it was, then continue to the right child. If the node just visited
    was a right child, then visited the parent's parent and repeat the process.
*/
void main() 
{
    uint particle_index = gl_GlobalInvocationID.x;// * gl_NumWorkGroups.y * gl_NumWorkGroups.z + gl_GlobalInvocationID.y * gl_NumWorkGroups.z + gl_GlobalInvocationID.z;

    vec3 acceleration = vec3(0.0, 0.000, 0.0);
    vec3 position = positions[particle_index];
    //do gravity math;
    int current_node_index = 0;
    int last_node_index = 0;
    bool exit = false;

    //float visited_nodes[1000];
    //float splitbool[1000];
    node history[64];
    int current_level = 0;

    int nodes_visited = 0;
    int node_limit = 80;
    int counter = 0;
    int split_nodes = 0;
    int whole_nodes = 0;
    float last_ratio = 1.0;  
    float last_diagonal = 0.0;
    vec3 last_COM = vec3(0.0);
    while (!exit) {
        //get current node
        node current_node = radix_tree[current_node_index];
        history[current_level] = current_node;
        //check if mode appears large enough to be subdivided
        float threshhold = 0.25;

        //vector from this particle to the center of mass of the current node
        vec3 COM_displacement = current_node.COM.xyz - position;
        float dist_to_COM = sqrt(dot(COM_displacement, COM_displacement));

        //visited_nodes[nodes_visited] = current_node_index;

        if (current_node.minimum.w / dist_to_COM > threshhold) {
            //check children:
               
            //check if it's a leaf node:
            if (current_node_index >= leaf_node_offset) {
                //splitbool[nodes_visited++] = 3.0;

                if (dist_to_COM > 0.00001) {

                    acceleration += 6.67408e-11 * current_node.COM.w * COM_displacement / (0.001 + dist_to_COM  * dist_to_COM * dist_to_COM);
                }
                //move on...
                bool exit_inner = false;

                while (!exit_inner) {
                    int old_index = current_node_index;

                    current_node_index = current_node.parent;
                    current_node = history[current_level-1];//radix_tree[current_node_index];
                    current_level--;
                    //check if the node just visited was the left or right child
                    if (current_node.child1 == old_index) {
                        current_node_index = current_node.child2;
                        exit_inner = true;
                        current_level++;
                    }
                    else {
                        //check parent

                        //only the node with diagonal greater than 1.5 is the root node
                        if (current_node.minimum.w > 1.5) {
                            exit = true;
                            exit_inner = true;
                        }
                    }
                }
            }
            else {
                //splitbool[nodes_visited++] = 1.0;

                current_node_index = current_node.child1;
                current_level++;
            }
        }
        else {
            //splitbool[nodes_visited++] = 0.0;

            //apply gravity!
            if (dist_to_COM  * dist_to_COM * dist_to_COM > 0.0000001) {
                acceleration += 6.67408e-11 * current_node.COM.w * COM_displacement / (0.001 + dist_to_COM  * dist_to_COM * dist_to_COM);
            }

            //move on...
            bool exit_inner = false;
            while (!exit_inner) {
                
                int old_index = current_node_index;

                current_node_index = current_node.parent;
                current_node = history[current_level-1];//radix_tree[current_node_index];
                current_level--;
                //check if the node just visited was the left or right child
                
                if (current_node.child1 == old_index) {
                    current_node_index = current_node.child2;
                    exit_inner = true;
                    current_level++;
                }
                else {
                    //check parent

                    //only the node with diagonal greater than 1.5 is the root node
                    if (current_node.minimum.w > 1.5) {
                        exit = true;
                        exit_inner = true;
                    }
                }
            }
        }
    }
            

    /*
    int k = 0;
    while (k < nodes_visited) {
        positions[k] = vec3(visited_nodes[k], splitbool[k], 0.0);
        k++;
    }
    */
    //update velocity and position vectors
    velocity[particle_index] += acceleration * 1.0;

    positions[particle_index] += velocity[particle_index];

    
}
